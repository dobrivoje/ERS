/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package radionica.UI;

import ERS.TimeLine.Functionalities.Adapters.FirmaAdapter;
import ERS.queries.ERSQuery;
import JFXChartGenerators.CssStyles.CSSStyles;
import JFXChartGenerators.StackedBars.AbstractCategory_StackedBarGenerator;
import JFXChartGenerators.StackedBars.StackedBarCategoryX_Generator;
import com.dobrivoje.utilities.warnings.Display;
import ent.Firma;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Collection;
import java.util.Date;
import org.dobrivoje.calendarutilities.DobriKalendar;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.util.Lookup;
import org.openide.util.LookupEvent;
import org.openide.util.LookupListener;
import org.openide.windows.TopComponent;
import org.openide.util.NbBundle.Messages;
import org.openide.windows.WindowManager;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(
        dtd = "-//radionica.UI//DnevniTimeLine//EN",
        autostore = false
)
@TopComponent.Description(
        preferredID = "DnevniTimeLineTopComponent",
        persistenceType = TopComponent.PERSISTENCE_ALWAYS
)
@TopComponent.Registration(mode = "editor", openAtStartup = false)
@ActionID(category = "Window", id = "radionica.UI.DnevniTimeLineTopComponent")
@ActionReference(path = "Menu/Window/Servis", position = 1300)
@TopComponent.OpenActionRegistration(
        displayName = "#CTL_DnevniTimeLineAction",
        preferredID = "DnevniTimeLineTopComponent"
)
@Messages({
    "CTL_DnevniTimeLineAction=Dnevni TimeLine",
    "CTL_DnevniTimeLineTopComponent=Dnevni TimeLine",
    "HINT_DnevniTimeLineTopComponent=Dnevni TimeLine"
})
public final class DnevniTimeLineTopComponent extends TopComponent {

    private Lookup.Result<String> kalendarLookup;
    private LookupListener LLKalendar;
    private Lookup.Result<Firma> firmaLookup;
    private LookupListener LLFirma;

    private FirmaAdapter FA;

    private final AbstractCategory_StackedBarGenerator radniciFXCategories = new StackedBarCategoryX_Generator();

    //<editor-fold defaultstate="collapsed" desc="Kalendar Bind">
    private String kalendarDatum;
    private boolean novDatum;

    public String getKalendarDatum() {
        return kalendarDatum;
    }

    public void setKalendarDatum(String Datum) {
        if (Datum == null) {
            Datum = new SimpleDateFormat("yyyy-MM-dd").format(new Date());
            novDatum = true;
        }
        if (!Datum.equals(this.kalendarDatum)) {
            this.kalendarDatum = Datum;
            this.novDatum = true;
        } else {
            this.novDatum = false;
        }

    }
    //</editor-fold>

    //<editor-fold defaultstate="collapsed" desc="Firma bind">
    private Firma Firma = null;
    private boolean novaFirma;

    public Firma getFirma() {
        return Firma;
    }

    public void setFirma(Firma Firma) throws ParseException {
        if (Firma == null) {
            this.Firma = ERSQuery.PODRAZUMEVANA_FIRMA;
            FA = new FirmaAdapter(Firma, kalendarDatum);
            this.novaFirma = true;
        } else if (!Firma.equals(this.Firma)) {
            this.Firma = Firma;
            FA.setFirma(Firma);
            this.novaFirma = true;
        } else {
            this.novaFirma = false;
        }
    }
    //</editor-fold>

    public DnevniTimeLineTopComponent() throws ParseException {
        initComponents();
        setName(Bundle.CTL_DnevniTimeLineTopComponent());
        setToolTipText(Bundle.HINT_DnevniTimeLineTopComponent());

        // Print funkcionalnost
        putClientProperty("print.printable", Boolean.TRUE);

        setKalendarDatum(null);
        setFirma(null);

        radniciFXCategories.setUpChartPanel(jPanel_TimeLine);
        radniciFXCategories.setCSSStyle(CSSStyles.Style.RED_BAR);
        setFX_TimeLine(Firma, kalendarDatum, radniciFXCategories);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel_TimeLine = new javax.swing.JPanel();

        jPanel_TimeLine.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel_TimeLine.setLayout(new java.awt.BorderLayout());

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel_TimeLine, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel_TimeLine, javax.swing.GroupLayout.DEFAULT_SIZE, 286, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel_TimeLine;
    // End of variables declaration//GEN-END:variables
    //<editor-fold defaultstate="collapsed" desc="UI Lookup">
    @Override
    public void componentOpened() {
        kalendarLookup = WindowManager
                .getDefault()
                .findTopComponent("PretrazivacTopComponent")
                .getLookup().lookupResult(String.class);
        firmaLookup = WindowManager
                .getDefault()
                .findTopComponent("PretrazivacTopComponent")
                .getLookup().lookupResult(Firma.class);

        LLKalendar = new LookupListener() {
            @Override
            public void resultChanged(LookupEvent le) {
                Lookup.Result lr = (Lookup.Result) le.getSource();
                Collection<String> datumi = lr.allInstances();

                try {
                    if (!datumi.isEmpty()) {
                        for (String d1 : datumi) {
                            setKalendarDatum(d1);
                            setFX_TimeLine(Firma, kalendarDatum, radniciFXCategories);
                        }
                    }
                } catch (ParseException ex) {
                }
            }
        };
        kalendarLookup.addLookupListener(LLKalendar);

        LLFirma = new LookupListener() {
            @Override
            public void resultChanged(LookupEvent le) {
                Lookup.Result lr = (Lookup.Result) le.getSource();
                Collection<Firma> firme = lr.allInstances();

                if (!firme.isEmpty()) {
                    for (Firma f1 : firme) {
                        try {
                            setFirma(f1);
                            setFX_TimeLine(Firma, kalendarDatum, radniciFXCategories);
                        } catch (ParseException ex) {
                        }
                    }
                }
            }
        };
        firmaLookup.addLookupListener(LLFirma);
    }

    @Override
    public void componentClosed() {
        kalendarLookup.removeLookupListener(LLKalendar);
        kalendarLookup = null;
        firmaLookup.removeLookupListener(LLFirma);
        firmaLookup = null;
    }
     //</editor-fold>

    //<editor-fold defaultstate="collapsed" desc="ne treba...">
    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }
    //</editor-fold>

    private void setFX_TimeLine(Firma Firma, String Datum, AbstractCategory_StackedBarGenerator acsg)
            throws ParseException {
        FirmaAdapter fa = new FirmaAdapter(Firma, Datum);

        if (novDatum || novaFirma) {
            try {
                acsg.setUpSeries();
                acsg.setChartTitle(Datum);
                acsg.createFXObject();

            } catch (NullPointerException ex) {
                Display.obavestenjeBaloncic("Greška.", ex.getLocalizedMessage(), Display.TIP_OBAVESTENJA.GRESKA);
            } catch (Exception e) {
                Display.obavestenjeBaloncic("Greška.", e.toString(), Display.TIP_OBAVESTENJA.GRESKA);
            }
        }
    }
}
